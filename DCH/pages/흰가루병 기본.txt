# pages/1_흰가루병_분석.py
import streamlit as st
from PIL import Image, UnidentifiedImageError
import cv2
import numpy as np
import io
import pandas as pd

# --- Helper Function ---
@st.cache_data(show_spinner="이미지 처리 중...")
def calculate_disease_area_ratio(_image_bytes_key, image_bytes, lower_hsv, upper_hsv, lower_green_hsv, upper_green_hsv):
    try:
        pil_image = Image.open(io.BytesIO(image_bytes))
    except UnidentifiedImageError:
        st.error(f"이미지 파일을 열 수 없거나 지원하지 않는 형식입니다.")
        return 0.0, None, None
    except Exception as e:
        st.error(f"이미지 파일을 여는 중 오류 발생: {e}")
        return 0.0, None, None

    original_pil_image_for_display = pil_image.copy()
    image_np_rgb = np.array(pil_image.convert('RGB'))
    if image_np_rgb.ndim == 2: image_np_rgb = cv2.cvtColor(image_np_rgb, cv2.COLOR_GRAY2RGB)
    elif image_np_rgb.shape[2] == 4: image_np_rgb = image_np_rgb[:, :, :3]
        
    image_bgr = cv2.cvtColor(image_np_rgb, cv2.COLOR_RGB2BGR)
    hsv = cv2.cvtColor(image_bgr, cv2.COLOR_BGR2HSV)

    lower_hsv = np.array(lower_hsv, dtype=np.uint8)
    upper_hsv = np.array(upper_hsv, dtype=np.uint8)
    lower_green_hsv = np.array(lower_green_hsv, dtype=np.uint8)
    upper_green_hsv = np.array(upper_green_hsv, dtype=np.uint8)

    disease_mask = cv2.inRange(hsv, lower_hsv, upper_hsv)
    leaf_mask = cv2.inRange(hsv, lower_green_hsv, upper_green_hsv)
    
    disease_area = cv2.countNonZero(disease_mask)
    leaf_area = cv2.countNonZero(leaf_mask)
    
    ratio = 0.0
    if leaf_area > 0: ratio = (disease_area / leaf_area) * 100
    
    visualization_img_np = image_np_rgb.copy()
    visualization_img_np[disease_mask > 0] = [255, 0, 0]

    try:
        processed_image_pil = Image.fromarray(visualization_img_np)
    except Exception as e:
        st.error(f"처리된 이미지를 생성하는 데 실패했습니다: {e}")
        return ratio, original_pil_image_for_display, None
        
    return ratio, original_pil_image_for_display, processed_image_pil
# --- End Helper Function ---

st.set_page_config(page_title="흰가루병 분석", layout="wide")
st.title("⚪ 흰가루병 분석")
st.markdown("흰가루병으로 의심되는 오이 잎 사진을 업로드하고 병반 면적률을 분석하세요.")

# 기본 HSV 값 설정 (흰가루병 기준)
DISEASE_NAME = "흰색 반점"
DEFAULT_LOWER_DISEASE = [0, 0, 180]
DEFAULT_UPPER_DISEASE = [180, 80, 255]
DEFAULT_LOWER_GREEN = [35, 40, 40]
DEFAULT_UPPER_GREEN = [85, 255, 255]

uploaded_files = st.file_uploader(
    "흰가루병 오이 잎 사진을 업로드하세요 (여러 장 가능)", 
    type=["jpg", "jpeg", "png"],
    accept_multiple_files=True,
    key="uploader_powdery_mildew"
)

if 'hsv_settings_pm' not in st.session_state:
    st.session_state.hsv_settings_pm = {}
if 'results_to_display_pm' not in st.session_state:
    st.session_state.results_to_display_pm = {}

results_for_csv = []

if uploaded_files:
    st.markdown("---")
    for idx, uploaded_file in enumerate(uploaded_files):
        file_key = f"pm_{uploaded_file.name}_{uploaded_file.size}_{idx}"
        file_bytes = uploaded_file.getvalue()

        if file_key not in st.session_state.hsv_settings_pm:
            st.session_state.hsv_settings_pm[file_key] = {
                'lower_disease': list(DEFAULT_LOWER_DISEASE),
                'upper_disease': list(DEFAULT_UPPER_DISEASE),
            }
        
        current_hsv_settings = st.session_state.hsv_settings_pm[file_key]

        if file_key not in st.session_state.results_to_display_pm or \
           st.session_state.results_to_display_pm[file_key].get('recalculate', True):
            
            ratio, original_img, processed_img = calculate_disease_area_ratio(
                file_key + "_recalc",
                file_bytes,
                current_hsv_settings['lower_disease'], current_hsv_settings['upper_disease'],
                DEFAULT_LOWER_GREEN, DEFAULT_UPPER_GREEN
            )
            st.session_state.results_to_display_pm[file_key] = {
                'ratio': ratio, 'original_img': original_img,
                'processed_img': processed_img, 'recalculate': False
            }
        
        display_data = st.session_state.results_to_display_pm[file_key]

        st.subheader(f"📄 원본 이미지: {uploaded_file.name}")
        if display_data['original_img']:
            st.image(display_data['original_img'], use_container_width=True)
        else:
            st.error(f"{uploaded_file.name}: 원본 이미지를 표시할 수 없습니다."); st.markdown("---"); continue
        
        st.markdown(f"병반 면적률: <span style='font-size:18px; font-weight:bold;'>{display_data['ratio']:.2f}%</span>", unsafe_allow_html=True)

        with st.expander(f"🛠️ {uploaded_file.name} - {DISEASE_NAME} HSV 조절"):
            lower_h_val = current_hsv_settings['lower_disease'][0]
            lower_s_val = current_hsv_settings['lower_disease'][1]
            lower_v_val = current_hsv_settings['lower_disease'][2]
            upper_h_val = current_hsv_settings['upper_disease'][0]
            upper_s_val = current_hsv_settings['upper_disease'][1]
            upper_v_val = current_hsv_settings['upper_disease'][2]

            st.markdown(f"#### {DISEASE_NAME} HSV 범위 조절")
            col_lh, col_ls, col_lv = st.columns(3)
            with col_lh: lower_h = st.slider(f"Lower H ({DISEASE_NAME})", 0, 180, lower_h_val, key=f"pm_lh_{file_key}")
            with col_ls: lower_s = st.slider(f"Lower S ({DISEASE_NAME})", 0, 255, lower_s_val, key=f"pm_ls_{file_key}")
            with col_lv: lower_v = st.slider(f"Lower V ({DISEASE_NAME})", 0, 255, lower_v_val, key=f"pm_lv_{file_key}")
            
            col_uh, col_us, col_uv = st.columns(3)
            with col_uh: upper_h = st.slider(f"Upper H ({DISEASE_NAME})", 0, 180, upper_h_val, key=f"pm_uh_{file_key}")
            with col_us: upper_s = st.slider(f"Upper S ({DISEASE_NAME})", 0, 255, upper_s_val, key=f"pm_us_{file_key}")
            with col_uv: upper_v = st.slider(f"Upper V ({DISEASE_NAME})", 0, 255, upper_v_val, key=f"pm_uv_{file_key}")

            st.session_state.hsv_settings_pm[file_key]['lower_disease'] = [lower_h, lower_s, lower_v]
            st.session_state.hsv_settings_pm[file_key]['upper_disease'] = [upper_h, upper_s, upper_v]
            
            btn_col1, btn_col2 = st.columns(2)
            with btn_col1:
                if st.button("🔄 HSV 값 적용", key=f"pm_apply_{file_key}"):
                    st.session_state.results_to_display_pm[file_key]['recalculate'] = True; st.rerun()
            with btn_col2:
                if st.button("↩️ HSV 초기화", key=f"pm_reset_{file_key}"):
                    st.session_state.hsv_settings_pm[file_key]['lower_disease'] = list(DEFAULT_LOWER_DISEASE)
                    st.session_state.hsv_settings_pm[file_key]['upper_disease'] = list(DEFAULT_UPPER_DISEASE)
                    st.session_state.results_to_display_pm[file_key]['recalculate'] = True; st.rerun()

            st.markdown("---")
            st.markdown("#### 🎨 원본 vs. HSV 조절 후 결과 이미지 비교")
            if display_data['original_img'] and display_data['processed_img']:
                img_col1, img_col2 = st.columns(2)
                with img_col1: st.image(display_data['original_img'], caption="원본", use_container_width=True)
                with img_col2: st.image(display_data['processed_img'], caption="처리 결과 (질병:빨강)", use_container_width=True)
            st.markdown(f"**표시된 병반 면적률**: <span style='font-size:18px; font-weight:bold;'>{display_data['ratio']:.2f}%</span>", unsafe_allow_html=True)
            st.markdown("##### 현재 슬라이더 HSV 설정 (적용 전일 수 있음):")
            st.json({f"Lower {DISEASE_NAME}": current_hsv_settings['lower_disease'], f"Upper {DISEASE_NAME}": current_hsv_settings['upper_disease']})
        
        results_for_csv.append({
            "파일명": uploaded_file.name, "질병 종류": "흰가루병",
            "병반 면적률 (%)": f"{display_data['ratio']:.2f}",
            f"Lower {DISEASE_NAME} (H,S,V)": str(current_hsv_settings['lower_disease']),
            f"Upper {DISEASE_NAME} (H,S,V)": str(current_hsv_settings['upper_disease'])
        })
        st.markdown("---")

    if results_for_csv:
        st.markdown("## 📊 전체 결과 요약 및 다운로드 (흰가루병)")
        df_pm = pd.DataFrame(results_for_csv)
        st.dataframe(df_pm)
        csv_pm = df_pm.to_csv(index=False).encode('utf-8-sig')
        st.download_button("📥 흰가루병 결과 저장", csv_pm, "흰가루병_분석결과.csv", key="download_pm")

if st.button("🏠 처음으로 돌아가기", key="home_pm"):
    st.switch_page("DCHapp.py")
